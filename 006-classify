#!/usr/bin/env Rscript

runlen <- as.integer(commandArgs(trailingOnly=T)[[1]])

#system.time(
biol_df <- read.table(paste(sep="", "frequencies-", runlen, "p-sample"),
                  header=F, na.strings="---", row.names=1)

shuf_df <- read.table(paste(sep="", "frequencies-", runlen, "p-shuffled"),
                  header=F, na.strings="---", row.names=1)

biol <- biol_df$V2
names(biol) <- row.names(biol_df)

shuf <- shuf_df$V2
names(shuf) <- row.names(shuf_df)

#Rprof()

boil_prediction_counts <- 0
shuf_prediction_counts <- 0


#getPattern <- function(seq, x) {substr(seq, x[[1]], x[[2]])}
getPattern <- function(seqv, x) {
  res <- seqv[x[[1]]:x[[2]]]
  paste(sep="", collapse="", res)
}


#
# Classifier 1
#
classifier1 <- function(seq) {
  seqv <- strsplit(seq, '')[[1]]
  #print(seq)

  sset_positions <- cbind(1:(nchar(seq) - (runlen - 1)), runlen:nchar(seq))
  ssets <- apply(sset_positions, 1, function(x){getPattern(seqv, x)})
  #print(ssets)

  ##############bquery <- names(biol) %in% ssets
  ##############biol_counts <- biol[bquery]
  biol_counts <- biol[ssets]
  biol_counts[is.na(biol_counts)] <- 1

  ##############squery <- names(shuf) %in% ssets
  ##############shuf_counts <- shuf[squery]
  shuf_counts <- shuf[ssets]
  shuf_counts[is.na(shuf_counts)] <- 1

  side_by_side <- rbind(biol_counts, shuf_counts)
  #print(side_by_side)

  # Divide the larger by smaller count
  ratios <- apply(side_by_side, 2, max) / apply(side_by_side, 2, min)
  #print(ratios)
  #quit()

  # Remove all the ties (ratio == 1)
  ratios[ratios==1] <- 0

  # # Leave only the max raito
  #ratios[-which.max(ratios)] <- 0
  #print(ratios)

  # Negate those where shuffled was larger
  shuf_ratio_ids <- apply(side_by_side, 2, function(x) x[[1]] < x[[2]])
  ratios[shuf_ratio_ids] <- -(ratios[shuf_ratio_ids])



  # Final score
  score <- sum(t(ratios))

  score
}



#
# MAIN
#

main <- function() {
#con <- file("t.tab", "r")
  con <- file("uniprot_2011_02_remaining90.tab", "r")
  #con <- file("shuffled-sample.tab", "r")
  line_number <- 0
  while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
    # Look at the sequences not the headers!
    seq  <- strsplit(line, "\t")[[1]][[2]] 
  
    score <- classifier1(seq)
  
  
    if (score > 0)
      boil_prediction_counts = boil_prediction_counts + 1
  
    if (score < 0)
      shuf_prediction_counts = shuf_prediction_counts + 1
  
    cat(paste(score, "\n"))
  
    line_number <- line_number + 1
  
    if (line_number %% 100 == 0)
      break #system("date") 
    
  }
  close(con)

  cat(paste(boil_prediction_counts, shuf_prediction_counts, "\n\n"))
}

system.time(main())
warnings()

#Rprof(NULL)
#summaryRprof("Rprof.out")
