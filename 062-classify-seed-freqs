#!/usr/bin/env ruby

#require 'ruby-prof'

CLASSIFIER_NAME = File.basename(__FILE__)

if ARGV.size != 2 or !(ARGV[0] =~ /\A[0-9]+\Z/) or !(ARGV[1] =~ /\A[0-9]+\Z/)
  STDERR.puts "USAGE: #{CLASSIFIER_NAME} <runlength> <seed-lineno>"
  exit 1
end

RUNLEN = ARGV[0].to_i
SEED_LINENO = ARGV[1].to_i

# Load Seeds
SEEDS = File.open("SEEDS-#{RUNLEN}p") do |f|
  f.collect do |line|
    seed = line.split(" ") # can be a multi-seed (with variance)
    seed.select do |s|
      if s.scan('x').size != RUNLEN
        STDERR.puts "WARNING: Bad seed on line #{f.lineno}"
        next false
      end
      next true
    end
  end
end

SEED = SEEDS[SEED_LINENO - 1]
raise if SEED.nil?


BIOL = {}
t = Time.now
File.open("./seed-frequencies-#{RUNLEN}p/s#{SEED_LINENO}-biol") do |f|
  f.each {|l| s, f = l.split("\t"); BIOL[s] = f.to_i}
end
STDERR.puts "Building BIOL hash took #{Time.now - t} seconds"

SHUF = {}
t = Time.now
File.open("./seed-frequencies-#{RUNLEN}p/s#{SEED_LINENO}-shuf") do |f|
  f.each {|l| s, f = l.split("\t"); SHUF[s] = f.to_i}
end
STDERR.puts "Building SHUF hash took #{Time.now - t} seconds"

def classifier1(seq)
  biol_counts = []
  shuf_counts = []

  SEED.each do |seed|
    seedlocs = []
    seed.split('').each_with_index{|x,i| seedlocs.push(i) if x == 'x'}

    sset_positions = (0..(seq.size - seed.size)).collect do |i|
      seedlocs.collect{|l| i + l}
    end

    ssets = sset_positions.collect do |positions|
      positions.collect{|p| seq[p..p]}.join('')
    end

    # Look up the frequencies of the patterns. Put 1 if not found.
    biol_counts += ssets.collect{|patt| BIOL[patt] || 1}
    shuf_counts += ssets.collect{|patt| SHUF[patt] || 1}
  end

  #biol_counts.zip(shuf_counts){|x| p x}
  #exit

  side_by_side = biol_counts.zip(shuf_counts)

  # Divide the larger by smaller count
  ratios = side_by_side.collect{|x| x.max.to_f / x.min}
  #puts ratios

  # Remove all the ties (ratio == 1)
  ratios.collect!{|x| x == 1 ? 0 : x}

  # # Leave only the max raito
  # maxratio = ratios.max
  # ratios.collect!{|x| x == maxratio ? x : 0}

  # Negate those where shuffled was larger
  side_by_side.each_with_index do |x, i|
    biol, shuff = x
    ratios[i] *= -1 if biol < shuff
  end

  # Final score
  ratios.inject(0){ |sum,x| sum ? sum+x : x }

end

biol_prediction_counts = 0
shuf_prediction_counts = 0

# ############## Profiling ##############################
# RubyProf.start
# #######################################################

t = Time.now
STDIN.each do |line|
  line.chomp!

  x = line.split("\t")

  if x.size != 2
    STDERR.puts "WARNING: Malformat on line #{STDIN.lineno}"
    next
  end

  seq = x[1]
  score = classifier1(seq)
  puts score
  score > 0 ? biol_prediction_counts += 1 : shuf_prediction_counts += 1
end
STDERR.puts "Classification took #{Time.now - t} seconds"

# ############## Profiling ##############################
# result = RubyProf.stop
# printer = RubyProf::FlatPrinter.new(result)
# printer.print(STDERR, 0)
# #######################################################



#puts [biol_prediction_counts, shuf_prediction_counts].join(" ")
