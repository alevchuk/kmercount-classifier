#!/usr/bin/env ruby

require 'ruby-prof'



if ARGV.size != 1 or !(ARGV.first =~ /\A[0-9]+\Z/)
  STDERR.puts "USAGE: 061-classify-in-ruby <runlength>"
  exit 1
end

RUNLEN = ARGV.first.to_i

BIOL = {}
t = Time.now
File.open("frequencies-#{RUNLEN}p-sample") do |f|
  f.each {|l| s, f = l.split("\t"); BIOL[s] = f.to_i}
end
STDERR.puts "Building BIOL hash took #{Time.now - t} seconds"

SHUF = {}
t = Time.now
File.open("frequencies-#{RUNLEN}p-shuffled") do |f|
  f.each {|l| s, f = l.split("\t"); SHUF[s] = f.to_i}
end
STDERR.puts "Building SHUF hash took #{Time.now - t} seconds"

def classifier1(seq)
  sset_positions = (0..(seq.size - RUNLEN - 1)).zip((RUNLEN - 1)..(seq.size))
  ssets = sset_positions.collect{|start,stop| seq[start..stop]}

  # Look up the frequencies of the patterns. Put 1 if not found.
  biol_counts = ssets.collect{|patt| BIOL[patt] || 1}
  shuf_counts = ssets.collect{|patt| SHUF[patt] || 1}
  #biol_counts.zip(shuf_counts){|x| p x}

  side_by_side = biol_counts.zip(shuf_counts)

  # Divide the larger by smaller count
  ratios = side_by_side.collect{|x| x.max.to_f / x.min}
  #puts ratios

  # Remove all the ties (ratio == 1)
  ratios.collect!{|x| x == 1 ? 0 : x}

  # # Leave only the max raito
  # maxratio = ratios.max
  # ratios.collect!{|x| x == maxratio ? x : 0}

  # Negate those where shuffled was larger
  side_by_side.each_with_index do |x, i|
    biol, shuff = x
    ratios[i] *= -1 if biol < shuff
  end

  # Final score
  ratios.inject(nil){ |sum,x| sum ? sum+x : x }

end

biol_prediction_counts = 0
shuf_prediction_counts = 0

############## Profiling ##############################
RubyProf.start
#######################################################

t = Time.now
STDIN.each do |line|
  x = line.split("\t")

  if x.size != 2
    STDERR.puts "WARNING: Malformat on line #{STDIN.lineno}"
    next
  end

  seq = x[1]
  score = classifier1(seq)
  puts score
  score > 0 ? biol_prediction_counts += 1 : shuf_prediction_counts += 1
end
STDERR.puts "Classification took #{Time.now - t} seconds"

############## Profiling ##############################
result = RubyProf.stop
printer = RubyProf::FlatPrinter.new(result)
printer.print(STDERR, 0)
#######################################################



puts [biol_prediction_counts, shuf_prediction_counts].join(" ")
